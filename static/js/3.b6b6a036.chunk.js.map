{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","MyPosts","memo","postsElements","posts","map","p","postsBlock","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","updatestatus","compose","withRouter"],"mappings":"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","file":"static/js/3.b6b6a036.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n   isAuth: state.auth.isAuth\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n   class RedirectComponent extends React.Component {\r\n      render (){\r\n         if (!this.props.isAuth) return <Redirect to='/login'/>\r\n         return <Component {...this.props}/>\r\n      }\r\n   }\r\n \r\n  let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect) (RedirectComponent);\r\n   return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3xuUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1tbpC\",\"posts\":\"MyPosts_posts__hdP6v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__10YHk\"};","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nclass  ProfileStatus extends React.Component {\r\n    state = {\r\n       editMode: false,\r\n       status: this.props.status\r\n    }\r\n    activatedMode = () => {\r\n       this.setState ({\r\n         editMode : true\r\n       })\r\n          \r\n    }\r\n    deactivatedMode = () => {\r\n       \r\n      this.setState ({\r\n        editMode : false\r\n      })\r\n         \r\n   }\r\n   onStatusChange = (e) => {\r\n      this.setState({\r\n          status: e.currentTarget.value\r\n      });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n      if (prevProps.status !== this.props.status) {\r\n          this.setState({\r\n              status: this.props.status\r\n          });\r\n      }\r\n\r\n      console.log(\"componentDidUpdate\")\r\n  }\r\n\r\nrender () {\r\n    return (\r\n        <div>\r\n           {!this.state.editMode &&\r\n               <div>\r\n                  <span onDoubleClick={this.activatedMode} >{this.props.status || '-----'}</span>\r\n               </div>\r\n          }         \r\n          {this.state.editMode &&\r\n               <div>\r\n                  <input onChange={this.onStatusChange} autoFocus={true} onBlur = {this.deactivatedMode} value= {this.props.status}></input>\r\n               </div>\r\n          }\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default ProfileStatus;","import React, {useState, useEffect} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    useEffect( ()  => {\r\n       setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={ activateEditMode }>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\r\n                       value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} />\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrW-Jw-ZMy8KVpsK728K3CAEogswHduRgqog&usqp=CAU' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo (props => {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => { props.addPost(values.newPostText); }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nlet AddNewPostForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength10]}\r\n                    placeholder='Post message' />\r\n\r\n            </div>\r\n            <div>\r\n                <button >Add post</button>\r\n            </div>\r\n        </form >\r\n    )\r\n}\r\nlet AddNewPostReduxForm = reduxForm({ form: 'ProfileAddNewPostForm' })(AddNewPostForm)\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      \r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile,getStatus,updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile (userId);\r\n        this.props.getStatus(userId) \r\n        \r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <Profile {...this.props} \r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updatestatus={this.props.updatestatus}\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId:state.auth.userId,\r\n    isAuth: state.auth.isAuth   \r\n});\r\n\r\n export default compose ( connect(mapStateToProps, {getUserProfile,getStatus,updateStatus}), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n/*let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile   \r\n});\r\n\r\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\nexport default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);*/"],"sourceRoot":""}